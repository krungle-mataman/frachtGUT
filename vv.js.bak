/*************************************************
 * 
 * 
 * 0Konstanten managen
 * Hinweis: neues deployment...neue Adresse und ABI !!!!!
 * 
 ***************************************************/
const dasJahr = "2018"

const versicherungsvertragByteCodeADR = 
  "";
const versicherungsvertragDeployedByteCodeADR = 
  "";

const versicherungsvertragABI = [

  {
    "constant": true,
    "inputs": [],
    "name": "laufzeit",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "transporte",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "status",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "versicherer",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "erstellungsdatum",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "beginn",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "summe",
    "outputs": [
      {
        "name": "",
        "type": "int256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "tarif",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "id",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "nr",
    "outputs": [
      {
        "name": "",
        "type": "int256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "ende",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "versicherungsnehmer",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "name": "kp",
        "type": "address"
      },
      {
        "name": "vn",
        "type": "string"
      },
      {
        "name": "vu",
        "type": "string"
      },
      {
        "name": "tar",
        "type": "string"
      },
      {
        "name": "vnr",
        "type": "int256"
      },
      {
        "name": "sum",
        "type": "int256"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gibTransportAnzahl",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "transport",
        "type": "address"
      }
    ],
    "name": "ergaenzeTransport",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "erhoeheSchaden",
    "outputs": [],
    "payable": true,
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "lz",
        "type": "string"
      },
      {
        "name": "bg",
        "type": "string"
      },
      {
        "name": "ed",
        "type": "string"
      }
    ],
    "name": "aendereLaufzeit",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "beendeVertrag",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  }

];



const kooperationABI = [

  {
    "constant": true,
    "inputs": [],
    "name": "name",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "beschreibung",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "versicherungen",
    "outputs": [
      {
        "name": "nr",
        "type": "uint256"
      },
      {
        "name": "name",
        "type": "string"
      },
      {
        "name": "branche",
        "type": "string"
      },
      {
        "name": "kategorie",
        "type": "string"
      },
      {
        "name": "tarife",
        "type": "string"
      },
      {
        "name": "saldo",
        "type": "uint256"
      },
      {
        "name": "konto",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "details",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "speditionen",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "nr",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "versicherungsvertraege",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "name": "p",
        "type": "uint256"
      },
      {
        "name": "n",
        "type": "string"
      },
      {
        "name": "d",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gibName",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gibNr",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gibDetails",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gibBeschreibung",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gibSpedionAnzahl",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gibVersicherungAnzahl",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gibVersicherungsvertragAnzahl",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "index",
        "type": "uint256"
      }
    ],
    "name": "gibVersicherungsvertrag",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "index",
        "type": "uint256"
      }
    ],
    "name": "gibSpedition",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "index",
        "type": "uint256"
      }
    ],
    "name": "gibVersicherungID",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "index",
        "type": "uint256"
      }
    ],
    "name": "gibVersicherungName",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "index",
        "type": "uint256"
      }
    ],
    "name": "gibVersicherungDetails",
    "outputs": [
      {
        "name": "",
        "type": "string"
      },
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "p",
        "type": "string"
      }
    ],
    "name": "aendereName",
    "outputs": [],
    "payable": true,
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "p",
        "type": "string"
      }
    ],
    "name": "aendereBeschreibung",
    "outputs": [],
    "payable": true,
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "p",
        "type": "string"
      }
    ],
    "name": "aendereDetails",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "n",
        "type": "string"
      },
      {
        "name": "t",
        "type": "string"
      },
      {
        "name": "a",
        "type": "address"
      }
    ],
    "name": "ergaenzeVersicherung",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "n",
        "type": "string"
      }
    ],
    "name": "ergaenzeSpedition",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "vv",
        "type": "address"
      }
    ],
    "name": "ergaenzeVersicherungsvertrag",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  }

];




/*************************************************
 * 
 * 
 * 0Kooperationen managen
 * 
 * 
 ***************************************************/
function registriereVersicherungsvertrag(data){



  console.log("Registriere Vertrag ... " + data.dieKooperationName + data.derVersicherungsvertrag );
  var param1=data.derVersicherungsvertrag;

  try {

    //
    // Code für ändern ????
    //
   myContractInstance=data.dieKooperation;
   data.Systeminfo("REGistriere Versicherung (" + bcManager + gebuehr0 + fgGaslimit);      
    myContractInstance.ergaenzeVersicherung(
      param1,
      {from : bcManager, value: gebuehr0, gas: fgGaslimit}, 
      function(err, result){
        if(!err) {
          // NOTE: The callback will fire twice!
          // Once the contract has the transactionHash property set and once its deployed on an address.
           // e.g. check tx hash on the first call (transaction send)
          if(!myContract.address) {
              console.log("Phase1- " + myContract.transactionHash) // The hash of the transaction, which deploys the contract
          
          // check address on the second call (contract deployed)
          } else {
              console.log("Phase2- " + myContract.address) // the contract address
          }
           // Note that the returned "myContractReturned" === "myContract",
          // so the returned "myContractReturned" object will also get the address set.
       }
       else {

         console.log("Fehler in der Methode beim Speditionen aendern: " + error);

       }
      });
      
   
    
    console.log("Registrierung des Versicherungsvertrags in der Kooperation fertig.")


  } catch (error) {

    console.log("Registrierung des Versicherungsvertrags in der Kooperation fehlerhaft " + error);
    
  }



}

 function aendereVersicherungsvertrag (data) {

  console.log("Kooperation aendern ... " + data.kpNameNeu );
  var param1=data.kpNameNeu;

  try {

    //
    // Code für ändern ????
    //
    var myContract = web3.eth.contract(versicherungsvertragABI);
    var myContractInstance = myContract.at(versicherungsvertragContractADR);
      console.log("contract/contractinstanz:" + myContract + "/" + myContractInstance);
      console.log("contract/contractinstanz:" + myContract.address + "/" + myContractInstance.address);
      
    myContractInstance.aendereName(
      param1,
      {from : bcManager, value: gebuehr1, gas: fgGaslimit}, 
      function(err, result){
        if(!err) {
          // NOTE: The callback will fire twice!
          // Once the contract has the transactionHash property set and once its deployed on an address.
           // e.g. check tx hash on the first call (transaction send)
          if(!myContract.address) {
              console.log("Phase1- " + myContract.transactionHash) // The hash of the transaction, which deploys the contract
          
          // check address on the second call (contract deployed)
          } else {
              console.log("Phase2- " + myContract.address) // the contract address
          }
           // Note that the returned "myContractReturned" === "myContract",
          // so the returned "myContractReturned" object will also get the address set.
       }
       else {

         console.log("Fehler in der Methode beim Container aendern: " + error);

       }
      });
      
   
    
    console.log("Kooperation aendern fertig.")


  } catch (error) {

    console.log("Fehler bei Kooperatoin  aendern: " + error);
    
  }

}


function aendereKooperationBeschreibung (data) {


  console.log("aendereBeschreibung  ... " + data.kpBeschreibungNeu );

  //parameter übernehmen
  var param1=data.kpBeschreibungNeu;


  try {

    //
    // Code für ändern 
    //
    var myContract = web3.eth.contract(versicherungsvertragABI);
    var myContractInstance = myContract.at(versicherungsvertragContractADR);
      console.log("contract/contractinstanz:" + myContract + "/" + myContractInstance);
      console.log("contract/contractinstanz:" + myContract.address + "/" + myContractInstance.address);
      
    myContractInstance.aendereBeschreibung(
      param1,
      {from : bcManager, value: gebuehr0, gas: fgGaslimit}, 
      function(err, result){
        if(!err) {
          // NOTE: The callback will fire twice!
          // Once the contract has the transactionHash property set and once its deployed on an address.
           // e.g. check tx hash on the first call (transaction send)
          if(!myContract.address) {
              console.log("Phase1- " + myContract.transactionHash) // The hash of the transaction, which deploys the contract
          
          // check address on the second call (contract deployed)
          } else {
              console.log("Phase2- " + myContract.address) // the contract address
          }
           // Note that the returned "myContractReturned" === "myContract",
          // so the returned "myContractReturned" object will also get the address set.
       }
       else {

         console.log("Fehler in der Methode beim Container aendern: " + error);

       }
      });
      
   
    
    console.log("Kooperationsbeschreibung aendern fertig.")


  } catch (error) {

    console.log("Fehler bei Kooperationsbeschreibung  aendern: " + error);
    
  }

}

function aendereVersicherungsvertragTransport (data) {

  console.log("aendereKooperationSpedition ... " + data.sSpeditionname );
  var param1=data.sSpeditionname;

  try {

    //
    // Code für ändern ????
    //
    var myContract = web3.eth.contract(versicherungsvertragABI);
    var myContractInstance = myContract.at(versicherungsvertragContractADR);
      console.log("contract/contractinstanz:" + myContract + "/" + myContractInstance);
      console.log("contract/contractinstanz:" + myContract.address + "/" + myContractInstance.address);
      
    myContractInstance.ergaenzeSpedition(
      param1,
      {from : bcManager, value: gebuehr0, gas: fgGaslimit}, 
      function(err, result){
        if(!err) {
          // NOTE: The callback will fire twice!
          // Once the contract has the transactionHash property set and once its deployed on an address.
           // e.g. check tx hash on the first call (transaction send)
          if(!myContract.address) {
              console.log("Phase1- " + myContract.transactionHash) // The hash of the transaction, which deploys the contract
          
          // check address on the second call (contract deployed)
          } else {
              console.log("Phase2- " + myContract.address) // the contract address
          }
           // Note that the returned "myContractReturned" === "myContract",
          // so the returned "myContractReturned" object will also get the address set.
       }
       else {

         console.log("Fehler in der Methode beim Speditionen aendern: " + error);

       }
      });
      
   
    
    console.log("Kooperation mit Spedition aendern fertig.")


  } catch (error) {

    console.log("Fehler bei Kooperatoin mit Spedition aendern: " + error);
    
  }

}



function InitTransaktion (data) {

  data.trInfo1="Gaslimit: " + fgDefaultGaslimit;
  data.trInfo2="Gasprice: " + fgDefaultGasprice;
  data.trInfo3="Gas: " + fgDefaultGas;
  data.trInfo4="Manager: " + bcManager;

}


/*************************************************
 * 
 * 
 * 0Unternehmen managen
 * 
 * 
 ***************************************************/
function leseVersicherungsvertrag(data){

  console.log("Versicherungsvertrag lesen... " + data );


    //web3 = new Web3(web3.currentProvider);
    //var contractDesc = web3.eth.contract(kooperationABI);
    //var contract = contractDesc.at(kooperationContractADR); // "Cast"
    contract = data.derVersicherungsvertrag;

    t="00";
    data.va = contract.address; //kooperationContractADR;
    //data.Systeminfo= kooperationABI + "/" + kooperationContractADR + "/" + contractDesc.adresse + "/"+ contract.adresse;
    console.log("step:" + t);

    data.versicherungsnehmer="vn";
    data.versicherer = "vu";
    try {

      /*
      t="0";
      contract.status((error, value) => {
        if (error) { console.error(error); }
        data.status = value;
      });*/
      console.log("step:" + t);

      t="1";
      contract.versicherungsnehmer((error, value) => {
        if (error) { console.error(error); }
        data.versicherungsnehmer = value;
      });
      console.log("step:" + t);
  
      t="2";
      contract.versicherer((error, value) => {
        if (error) { console.error(error); }
        data.versicherer = value;
      });
      console.log("step:" + t);
  



    } catch (error) {

      console.log("Fehler beim Versicherungsvertrag lesen:" + error);


    }


    //
    // Konto und -stand des Masters ermitteln
    //
   
    console.log("Versicherungsvertrag gelesen bis Schritt : " + t );

}



function anlegenVersicherungsvertrag (data) {

    console.log("bin beim versicherungsnehmer anlegen: ");
    console.log(data);
    
    //console.log(this.data.vvVersicherungssumme);

    //
    // Parameter aufbereiten 
    //
    //constructor (string memory vn, string memory vu, string memory tar, int vnr, int sum ) public {
    var param0 = data.dieKooperationAdresse;
    var param1 = data.versicherungsnehmer;
    var param2 = data.versicherer;
    var param3 = data.tarif;
    var param4 = 1; //data.versicherungsid.toNumber();
    var param5 = 100000 ; //data.summe

      /*/web3const myContract = new web3.eth.Contract([...], '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe', {
      defaultAccount: '0x1234567890123456789012345678901234567891', // default from address
      defaultGasPrice: '20000000000' // default gas price in wei, 20 gwei in this case
      });*/
      //eth.sendTransaction({from:eth.accounts[0], to:'0x[ADDRESS_HERE]', value: web3.toWei(5, "ether"), gas:100000});

    /*
    const contractDesc = web3.eth.contract(versicherungsvertragABI);
    data.Systeminfo="Versicherungsvertrag anlegen (" + bcManager + "gasprice:" + fgDefaultGasprice + "gas" + fgDefaultGas;      

    const vv = contractDesc.new(param0,param1,param2,param3,param4,param5, {
      data: versicherungsvertragByteCodeADR,
      defaultAccount: bcManager,
      //defaultGasPrice: fgDefaultGasprice,
      //defaultGas : fgDefaultGas 
    }, function(error, contract) {
        if (error)  { console.error("Fehler bei der Anlage: " + error); }
        console.log("Versicherungsvertrag angelegt?"); // + contract.address);
        //data.derVersicherungsvertrag = contract;

    });
    console.log("Versicherungsvertrag anlegen abgeschlossen." + vv.address);*/
    const contractDesc = new web3.eth.contract(versicherungsvertragABI);
    data.Systeminfo="Versicherungsvertrag anlegen (" + bcManager + "gasprice:" + fgDefaultGasprice + "gas" + fgDefaultGas;      
    contractDesc.deploy({data: versicherungsvertragByteCodeADR,arguments: [param0,param1,param2,param3,param4,param5]})
        .send({
        from: bcManager,
        gas: 1500000,
        gasPrice: '30000000000000'
    }, (error, transactionHash) => { console.log("fehler:" + error + transactionHash) })
    .on('error', (error) => { console.log(error) })
    .on('transactionHash', (transactionHash) => { console.log(error) })
    .on('receipt', (receipt) => {
       console.log(receipt.contractAddress) // contains the new contract address
    })
    .on('confirmation', (confirmationNumber, receipt) => { console.log("fertig") })
    .then((newContractInstance) => {
        console.log(newContractInstance.options.address) // instance with the new contract address
    });

   
  }




function sucheKooperation(data)  {

  console.log("Kooperation suchen ...");

  //Anhang der Adresse den Kooperationsvertrag suchen
  var myContract = web3.eth.contract(kooperationABI);
  var myContractInstance = myContract.at(kooperationContractADR);
  data.dieKooperation = myContractInstance;
  data.dieKooperationAdresse = kooperationContractADR; //? myContractInstance.adresse;
    //console.log("contract/contractinstanz:" + myContract + "/" + myContract.address);
    console.log("contract/contractinstanz:" + myContractInstance + "/" + myContractInstance.address);

  data.dieKooperationName="noch zu suchen";
  myContractInstance.name((error, value) => {
    if (error) { console.error("fehlerchen: " + error); }
    if (!error) {
      data.dieKooperationName = value;
      console.log("die Kooperation: " + data.dieKooperation + "/" + data.dieKooperationName + "/" +data.dieKooperationAdresse);
      return 0;
    }
  });


  console.log("Kooperation (noch nicht?) gefunden!");

}




/*************************************************
 * 
 * 
 * 5Testdaten managen
 * 
 * 
 ***************************************************/
function ErzeugeTestdaten (data) {

  //
  //Gründungsverträge erstellen
  //
  data.versicherungsnehmer="flink&schnell";
  data.versicherer="ruv";
  data.tarif="standardTarif-2014";
  data.versicherungsid="12"; 
  data.summe="120";
  anlegenVersicherungsvertrag(data);

  leseVersicherungsvertrag(data);

  console.log("Gründungsverträge erfolgreich initialisiert");
 
}



function sucheVersicherungsvertraege(data) {

  console.log("Versicherungsverträge finden..." + data.dieKooperationName);

  var versicherungsid;
  var versicherungsname;
  var anzahl=0;

  try {
    
    
   //anzahl = data.dieKooperation.gibVersicherungsvertragAnzahl();
   data.anzahlVersicherungsvertraege = data.dieKooperation.versicherungsvertraege.length;

 }
 catch (error) {

  console.log(error);
  anzahlVersicherungsvertraege=0;
    
 }



  contract=data.dieKooperation;
  try {

    
    data.versicherungsvertraege=new Array();

    anzahl=anzahlVersicherungsvertraege;
    for (let i = 0; i < anzahl; i++) {
         console.log(i + ".Versicherungsvertrag von " + anzahl);

       //id holen
       contract =dieKooperation.gibVersicherungsvertrag (i);
       contract.id ((error, value) => {
          console.log(" id" + value);
          versicherungsid=value;

          /*name holen 
          contract.versicherungsvertraege[i].nr(i, (error, value) => {
            console.log("nr:" + value);
            versicherungsname = value.toString();*/
   

          console.log("id: " + versicherungsid);


          //liste aktualisieren
          data.versicherungen.push
              (
                {id : versicherungsid, 
                versicherer : "ruv",
                versicherungsnehmer : "Versicherung",
                beginn : "Beginn",
                tarife : "Tarif A-89", 
                status : "aktiv",
                saldo : "0" ,
                waehrung : data.bcWaehrung,
                adresse: "noch kein Konto"}
          );
        //});           

      });



     
      console.log(i + ".Unternehmen: " + name);
    }
  }
  catch (error) 
  {
    console.log("Fehler beim Lesen der Unternehmen : " + error);
  }

}



function sucheVersicherungsvertraegeALt(data) {

  console.log("Versicherungsvertraege finden..." + data.dieKooperationName);

  var contractDesc = web3.eth.contract(kooperationABI);
  var contract = contractDesc.at(kooperationContractADR); // "Cast"


  try {

    console.log("Anzahl Versicherungsvertraege finden...");
    var anzahl = contract.gibVersicherungAnzahl() ; 


    data.versicherungsvertraege=new Array();
    for (let i = 0; i < anzahl; i++) {
         console.log(i + ".Versicherungsvertrag von " + anzahl);

        //id holen
        contract.id (i, (error, value) => {
        console.log(" id" + value);
        versicherungsid=value;

          //name holen
          contract.nr(i, (error, value) => {
            console.log("vr:" + value);
            versicherungsname = value;
   
            console.log("idn: " +versicherungsname+ versicherungsid);



          //liste aktualisieren
          data.  versicherungsvertraege.push
              (
                {id : versicherungsid, 
                name : versicherungsname,
                branche : "Versicherung",
                kategorie : "A",
 
                tarife : "Tarif A-89", 
                saldo : "0" ,
                waehrung : data.bcWaehrung,
                adresse: "noch kein Konto"}
          );
        });           

      });



     
      console.log(i + ".Unternehmen: " + name);
    }
  }
  catch (error) 
  {
    console.log("Fehler beim Lesen der Unternehmen : " + error);
  }

}



function InitTestparameter(data) {


  console.log("Parameter erzeugen");


   //
  //Testparameter erstellen
  //
  max=1000000;
  i = Math.round(Math.random() * (max - 1)) + 1;

  data.versicherungsnehmer="newDigitalTransport";
  data.versicherer="digAssurance Cooperate";
  data.tarif="FlatTransport2019";
  data.versicherungsid=i.toString(); 
  data.summe="12000000";
  data.status="geplant";
  data.laufzeit="24 Monate";
  data.beginn="1.1.2019";
  data.schaden=0;


  console.log("Parameter erzeugt" + data);
}



function eingabenPruefen (data) {

  var adressat;

  //
  // Wieviel ?
  //
  try {

    betragInEth = data.amount;
    betragInWei = web3.toWei(data.amount, 'ether');
    console.log("Konvertieren erfolgreich : von " +  data.amount +" nach "+  betragInWei);
    
  } catch (error) {
      console.log("Fehler beim Konvertieren:" +  data.amount +"/"+  + error);
    return 2;
  }

  //
  // alles gut
  //
  return 0;

}


function NaechsteSeite (data) {
  var link ="tp.html?";
  link=link+"kp="+data.dieKooperationAdresse;
  link=link+"&bcm="+data.derManager;
  link=link+"&vv="+data.versicherungsvertragContractADR;
  //link=link+"','Beispiel'";
  console.log(link);
  data.link=link;
  window.open(link);

}

/*************************************************
 * 
 * 
 * 9Startseite aufrufen
 * 
 * 
 ***************************************************/
function initVue() {

  const data = {

    /* Listen */
    versicherungsvertraege : [],
    anzahlVersicherungsvertraege : 0,
    
  
    transporte : [],
    anzahlTransporte : "0",



    /* Suchparameter */
    VersicherungsvertragFindenID : "unternehmen-id",

    VersichererFindenID : "versicherer-id",

    VersicherungsnehmerFindenID : "versicherten-id",

    trInfo1 :"",
    trInfo2 :"",
    trInfo3 :"",
    trInfo4 : "",

    /* Objekte */
     id : "id",
     versicherungsvertragsadresse : "adresse",
     versicherer : "versicherer",
     versicherungsnehmer : "versicherungsnehmer",
     beginn : "beginn", 
     tarif : "tarif",
     status : "status", 
     summe :  "summe",
     laufzeit : "laufzeit",
     schaden : "schaden",
     saldo : "saldo",                      
     waehrung : "waehrung",
     adresse : "adresse", 

    /** aktuelle Objekte */
    derVersicherungsvertrag : "derVersicherungsvertrag",
    dieKooperation : "noch zu suchen",
    dieKooperationAdresse : "0x2f7b5140F7992EBd8Ff7d337119c5fDe767Cc004",
    dieKooperationName : "newDigitalCareerMarket",
    derManager : "...",


    /* sonstiges */
    zufallszahl : 1,
    Systeminfo : "keine Meldungen vorhanden",


  };
  new Vue({
    el: '#app',
    data: data,
    methods: {


      VersicherungsvertragAendern() {

        if (data.kpNameNeu!="") {
          aendereVersicherungsvertrag(data);
        }

        /*if (data.kpBeschreibungNeu!="") {
          aendereKooperationBeschreibung(data);
        }*/
      },

            
      VersicherungsvertragFiltern() {
        //todo
    
      },

      VersicherungsvertragSuchen() {
        sucheVersicherungsvertraege(data);
      },

      VersicherungsvertragAnlegen() {
        anlegenVersicherungsvertrag(data);
        //data.Systeminfo="noch nicht implementiert";
      
      },

      VersicherungsvertragAnzeigen() {
        leseVersicherungsvertrag (data) ;

      },

      VersicherungsvertragRegistrieren() {
        registriereVersicherungsvertrag (data);
      },
      


      NaechsteSeite() {
        NaechsteSeite(data);
      },

      TestparameterErzeugen() {
        InitTestparameter(data);
      },

      TestdatenErzeugen() {
        ErzeugeTestdaten(data);
      },



    }
  });

  InitTransaktion(data);
  data.derManager=bcManager;
  data.dieKooperationAdresse=kooperationContractADR;
  data.kooperationContractADR=kooperationContractADR;
  sucheKooperation(data);

  try {
    
    anzahl = data.dieKooperation.gibVersicherungsvertragAnzahl();
    anzahlVersicherungsvertraege=0;
    console.log("Versicherungsverträge : " + anzahl );
 
  }
  catch (error) {
 
   console.log(error);
   anzahlVersicherungsvertraege=0;
     
  }
 


 

  //sucheVersicherungsvertraege(data);
  console.log("Initialisierung abgeschlossen");
  

}