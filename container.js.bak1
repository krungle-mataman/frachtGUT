
    /*
    Container.aendereInt((error, value) => {
      if (error) { console.error(error); }
      console.log("OK");
    });*/

    
    /*
    Container.methods.mymethod(aendereString)
    .send({ from: account, value : web3.utils.toString(value, 'eee')}, function (error, result) {
      console.log('Error', error);
      console.log('Result', result);
    });*/

    //ontractInstance.methods.mymethod(param).send({from: address, value: web3.utils.toWei( value, 'ether')})
    /*
    Container.methods.gibInt().call({from: '0x6d8C98f8eb01F8f7ee55D25Bf01e30Fa64333940'}, function (error, result) {
      console.log('Error', error)
      console.log('Result', result)
   });*/

   
/*
    contractInstance.methods.update()
    .send({ from: account1}, function (error, result) {
      console.log('Error', error)
      console.log('Result', result)

      // Now we get the balance
      contractInstance.methods.getBalances().call({ from: account1 }, 
      function (error, result) {
         console.log('Error', error)
         console.log('Result', result)
      })

    })
     .on('transactionHash', (hash) => {
      console.log('hash ' + hash)
     })
    .on('receipt', (receipt) => {
       console.log('receipt ' + receipt)
     })
     .on('confirmation', (confirmationNumber, receipt) => {
        console.log('confirmation ' + confirmationNumber + receipt)
     })
     .on('error', (error) => {
        console.log('error ' + error)
     })
 })*/


/* or sending and using a promise
myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})
.then((receipt) => {
    // receipt can also be a new contract instance, when coming from a "contract.deploy({...}).send()"
});*/


/*
    Container.aendereString ("p",function(error, result)  {
      if(error){console.error(error);}
          data.string1 = result;
     });

     
     var txHash;
     txHash = web3.eth.contract(kooperationABI)
     .at(kooperationContractADR)
    .aendereName(name, { gas: price, from: account },cbt(name,10,name));
  */


    /*
    Container.STRING1(p(error, value) => {
      if (error) { console.error(error); }
      data.string1 = value;
    });
  
    Container.BOOL3((error, value) => {
      if (error) { console.error(error); }
      data.bool3 = value;
    });
    Container.gibArrayLaenge((error, value) => {
      if (error) { console.error(error); }
      data.array5 = value;
    });
    Container.gibInt((error, value) => {
      if (error) { console.error(error); }
      data.int2 = value;
    });

    //bool public BOOL3;
    //address private ADDRESS4;*/
