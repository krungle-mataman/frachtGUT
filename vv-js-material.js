import Vue from 'vue';
import VueMaterial from 'vue-material';
import 'vue-material/dist/vue-material.min.css';

Vue.use(VueMaterial)

/*************************************************
 *
 *
 * 0Konstanten managen
 * Hinweis: neues deployment...neue Adresse und ABI !!!!!
 *
 ***************************************************/
const dasJahr = "2018"

const versicherungsvertragByteCodeADR =
  "0x60806040523480156200001157600080fd5b5060405162001d1f38038062001d1f833981018060405260c08110156200003757600080fd5b810190808051906020019092919080516401000000008111156200005a57600080fd5b828101905060208101848111156200007157600080fd5b81518560018202830111640100000000821117156200008f57600080fd5b50509291906020018051640100000000811115620000ac57600080fd5b82810190506020810184811115620000c357600080fd5b8151856001820283011164010000000082111715620000e157600080fd5b50509291906020018051640100000000811115620000fe57600080fd5b828101905060208101848111156200011557600080fd5b81518560018202830111640100000000821117156200013357600080fd5b5050929190602001805190602001909291908051906020019092919050505085600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360059080519060200190620001ab929190620002f7565b508460049080519060200190620001c4929190620002f7565b508260079080519060200190620001dd929190620002f7565b5081600081905550806006819055506000600d819055507f746f646f00000000000000000000000000000000000000000000000000000000600160006101000a81548167ffffffffffffffff02191690837801000000000000000000000000000000000000000000000000900402179055506040805190810160405280600881526020017f312e312e32303139000000000000000000000000000000000000000000000000815250600290805190602001906200029c929190620002f7565b506040805190810160405280600781526020017f6765706c616e740000000000000000000000000000000000000000000000000081525060089080519060200190620002ea929190620002f7565b50505050505050620003a6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200033a57805160ff19168380011785556200036b565b828001600101855582156200036b579182015b828111156200036a5782518255916020019190600101906200034d565b5b5090506200037a91906200037e565b5090565b620003a391905b808211156200039f57600081600090555060010162000385565b5090565b90565b61196980620003b66000396000f3fe608060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630b9a75761461012d5780630e253b1b146101bd578063200d2ed214610238578063301a0f91146102c85780634a0417fd146102df5780634bd0d0f21461034057806353876e1c1461036b5780635f2ad37d146103fb5780636117e56614610426578063687b7a88146104b65780636c46db041461054657806382029c9a146105715780638419471f146105c2578063ad790453146106f2578063af640d0f14610782578063b7b01d6d146107e3578063b890210c1461080e578063c7a477b714610839578063d11a58a214610abd578063e26ff23a14610b38578063e77dc43414610bc8578063f7f7bd9214610bdf575b600080fd5b34801561013957600080fd5b50610142610c6f565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610182578082015181840152602081019050610167565b50505050905090810190601f1680156101af5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c957600080fd5b506101f6600480360360208110156101e057600080fd5b8101908080359060200190929190505050610d0d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024457600080fd5b5061024d610d4b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561028d578082015181840152602081019050610272565b50505050905090810190601f1680156102ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102d457600080fd5b506102dd610de9565b005b3480156102eb57600080fd5b506102f4610e37565b604051808277ffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34801561034c57600080fd5b50610355610e66565b6040518082815260200191505060405180910390f35b34801561037757600080fd5b50610380610e73565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103c05780820151818401526020810190506103a5565b50505050905090810190601f1680156103ed5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561040757600080fd5b50610410610f11565b6040518082815260200191505060405180910390f35b34801561043257600080fd5b5061043b610f1b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561047b578082015181840152602081019050610460565b50505050905090810190601f1680156104a85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104c257600080fd5b506104cb610fb9565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561050b5780820151818401526020810190506104f0565b50505050905090810190601f1680156105385780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561055257600080fd5b5061055b611057565b6040518082815260200191505060405180910390f35b34801561057d57600080fd5b506105c06004803603602081101561059457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061105d565b005b3480156105ce57600080fd5b506106f0600480360360608110156105e557600080fd5b810190808035906020019064010000000081111561060257600080fd5b82018360208201111561061457600080fd5b8035906020019184600183028401116401000000008311171561063657600080fd5b90919293919293908035906020019064010000000081111561065757600080fd5b82018360208201111561066957600080fd5b8035906020019184600183028401116401000000008311171561068b57600080fd5b9091929391929390803590602001906401000000008111156106ac57600080fd5b8201836020820111156106be57600080fd5b803590602001918460018302840111640100000000831117156106e057600080fd5b90919293919293905050506110c6565b005b3480156106fe57600080fd5b50610707611104565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561074757808201518184015260208101905061072c565b50505050905090810190601f1680156107745780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561078e57600080fd5b506107976111a2565b604051808277ffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b3480156107ef57600080fd5b506107f86111cd565b6040518082815260200191505060405180910390f35b34801561081a57600080fd5b506108236111d3565b6040518082815260200191505060405180910390f35b34801561084557600080fd5b5061084e6112e2565b604051808877ffffffffffffffffffffffffffffffffffffffffffffffff191677ffffffffffffffffffffffffffffffffffffffffffffffff19168152602001806020018060200180602001878152602001806020018060200186810386528c818151815260200191508051906020019080838360005b838110156108e05780820151818401526020810190506108c5565b50505050905090810190601f16801561090d5780820380516001836020036101000a031916815260200191505b5086810385528b818151815260200191508051906020019080838360005b8381101561094657808201518184015260208101905061092b565b50505050905090810190601f1680156109735780820380516001836020036101000a031916815260200191505b5086810384528a818151815260200191508051906020019080838360005b838110156109ac578082015181840152602081019050610991565b50505050905090810190601f1680156109d95780820380516001836020036101000a031916815260200191505b50868103835288818151815260200191508051906020019080838360005b83811015610a125780820151818401526020810190506109f7565b50505050905090810190601f168015610a3f5780820380516001836020036101000a031916815260200191505b50868103825287818151815260200191508051906020019080838360005b83811015610a78578082015181840152602081019050610a5d565b50505050905090810190601f168015610aa55780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b348015610ac957600080fd5b50610af660048036036020811015610ae057600080fd5b8101908080359060200190929190505050611646565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b4457600080fd5b50610b4d61168e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b8d578082015181840152602081019050610b72565b50505050905090810190601f168015610bba5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610bd457600080fd5b50610bdd61172c565b005b348015610beb57600080fd5b50610bf461177a565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c34578082015181840152602081019050610c19565b50505050905090810190601f168015610c615780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60098054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d055780601f10610cda57610100808354040283529160200191610d05565b820191906000526020600020905b815481529060010190602001808311610ce857829003601f168201915b505050505081565b600c81815481101515610d1c57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60088054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610de15780601f10610db657610100808354040283529160200191610de1565b820191906000526020600020905b815481529060010190602001808311610dc457829003601f168201915b505050505081565b6040805190810160405280600581526020017f616b74697600000000000000000000000000000000000000000000000000000081525060089080519060200190610e34929190611818565b50565b6000600160009054906101000a9004780100000000000000000000000000000000000000000000000002905090565b6000600c80549050905090565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f095780601f10610ede57610100808354040283529160200191610f09565b820191906000526020600020905b815481529060010190602001808311610eec57829003601f168201915b505050505081565b6000600d54905090565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fb15780601f10610f8657610100808354040283529160200191610fb1565b820191906000526020600020905b815481529060010190602001808311610f9457829003601f168201915b505050505081565b600a8054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561104f5780601f106110245761010080835404028352916020019161104f565b820191906000526020600020905b81548152906001019060200180831161103257829003601f168201915b505050505081565b60065481565b600c8190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b8585600991906110d7929190611898565b508383600a91906110e9929190611898565b508181600b91906110fb929190611898565b50505050505050565b60078054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561119a5780601f1061116f5761010080835404028352916020019161119a565b820191906000526020600020905b81548152906001019060200180831161117d57829003601f168201915b505050505081565b600160009054906101000a900478010000000000000000000000000000000000000000000000000281565b60005481565b6000806000809050600091505b600c805490508210156112da576000600c838154811015156111fe57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16639bde54876040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561128d57600080fd5b505afa1580156112a1573d6000803e3d6000fd5b505050506040513d60208110156112b757600080fd5b8101908080519060200190929190505050820191505081806001019250506111e0565b809250505090565b600060608060606000606080600160009054906101000a9004780100000000000000000000000000000000000000000000000002600560046007600654600a6008858054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113b85780601f1061138d576101008083540402835291602001916113b8565b820191906000526020600020905b81548152906001019060200180831161139b57829003601f168201915b50505050509550848054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114545780601f1061142957610100808354040283529160200191611454565b820191906000526020600020905b81548152906001019060200180831161143757829003601f168201915b50505050509450838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114f05780601f106114c5576101008083540402835291602001916114f0565b820191906000526020600020905b8154815290600101906020018083116114d357829003601f168201915b50505050509350818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561158c5780601f106115615761010080835404028352916020019161158c565b820191906000526020600020905b81548152906001019060200180831161156f57829003601f168201915b50505050509150808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116285780601f106115fd57610100808354040283529160200191611628565b820191906000526020600020905b81548152906001019060200180831161160b57829003601f168201915b50505050509050965096509650965096509650965090919293949596565b600080600c8381548110151561165857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080915050919050565b600b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117245780601f106116f957610100808354040283529160200191611724565b820191906000526020600020905b81548152906001019060200180831161170757829003601f168201915b505050505081565b6040805190810160405280600781526020017f6265656e6465740000000000000000000000000000000000000000000000000081525060089080519060200190611777929190611818565b50565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118105780601f106117e557610100808354040283529160200191611810565b820191906000526020600020905b8154815290600101906020018083116117f357829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061185957805160ff1916838001178555611887565b82800160010185558215611887579182015b8281111561188657825182559160200191906001019061186b565b5b5090506118949190611918565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106118d957803560ff1916838001178555611907565b82800160010185558215611907579182015b828111156119065782358255916020019190600101906118eb565b5b5090506119149190611918565b5090565b61193a91905b8082111561193657600081600090555060010161191e565b5090565b9056fea165627a7a7230582032593908a57d0b7eb021ca5432f298f6bd506cd6f2d1e277feebd6da1fb12efe0029";
const versicherungsvertragDeployedByteCodeADR =
  "";

const versicherungsvertragABI = [
 
  {
    "constant": true,
    "inputs": [],
    "name": "laufzeit",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "transporte",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "status",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "versicherer",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "erstellungsdatum",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "beginn",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "summe",
    "outputs": [
      {
        "name": "",
        "type": "int256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "tarif",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "id",
    "outputs": [
      {
        "name": "",
        "type": "bytes8"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "nr",
    "outputs": [
      {
        "name": "",
        "type": "int256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "ende",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "versicherungsnehmer",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "name": "kp",
        "type": "address"
      },
      {
        "name": "vn",
        "type": "string"
      },
      {
        "name": "vu",
        "type": "string"
      },
      {
        "name": "tar",
        "type": "string"
      },
      {
        "name": "vnr",
        "type": "int256"
      },
      {
        "name": "sum",
        "type": "int256"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gibTransportAnzahl",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "transport",
        "type": "address"
      }
    ],
    "name": "ergaenzeTransport",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "ermittleSchadenshoehe",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "lz",
        "type": "string"
      },
      {
        "name": "bg",
        "type": "string"
      },
      {
        "name": "ed",
        "type": "string"
      }
    ],
    "name": "aendereLaufzeit",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "beendeVertrag",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "starteVertrag",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gibSchadenDetails",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gibID",
    "outputs": [
      {
        "name": "",
        "type": "bytes8"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gibDetails",
    "outputs": [
      {
        "name": "",
        "type": "bytes8"
      },
      {
        "name": "",
        "type": "string"
      },
      {
        "name": "",
        "type": "string"
      },
      {
        "name": "",
        "type": "string"
      },
      {
        "name": "",
        "type": "int256"
      },
      {
        "name": "",
        "type": "string"
      },
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "index",
        "type": "uint256"
      }
    ],
    "name": "gibTransport",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  }

];


const kooperationABI = [

  {
    "constant": true,
    "inputs": [],
    "name": "name",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "beschreibung",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "versicherungen",
    "outputs": [
      {
        "name": "nr",
        "type": "uint256"
      },
      {
        "name": "name",
        "type": "string"
      },
      {
        "name": "branche",
        "type": "string"
      },
      {
        "name": "kategorie",
        "type": "string"
      },
      {
        "name": "tarife",
        "type": "string"
      },
      {
        "name": "saldo",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "details",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "speditionen",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "nr",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "versicherungsvertraege",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "name": "p",
        "type": "uint256"
      },
      {
        "name": "n",
        "type": "string"
      },
      {
        "name": "d",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gibName",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gibNr",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gibDetails",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gibBeschreibung",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gibSpeditionAnzahl",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gibVersicherungAnzahl",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "gibVersicherungsvertragAnzahl",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "index",
        "type": "uint256"
      }
    ],
    "name": "gibVersicherungsvertrag",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "index",
        "type": "uint256"
      }
    ],
    "name": "gibSpedition",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "index",
        "type": "uint256"
      }
    ],
    "name": "gibVersicherungID",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "index",
        "type": "uint256"
      }
    ],
    "name": "gibVersicherungName",
    "outputs": [
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "index",
        "type": "uint256"
      }
    ],
    "name": "gibVersicherungDetails",
    "outputs": [
      {
        "name": "",
        "type": "string"
      },
      {
        "name": "",
        "type": "string"
      },
      {
        "name": "",
        "type": "string"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "p",
        "type": "string"
      }
    ],
    "name": "aendereName",
    "outputs": [],
    "payable": true,
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "p",
        "type": "string"
      }
    ],
    "name": "aendereBeschreibung",
    "outputs": [],
    "payable": true,
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "p",
        "type": "string"
      }
    ],
    "name": "aendereDetails",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "n",
        "type": "string"
      },
      {
        "name": "d",
        "type": "string"
      },
      {
        "name": "b",
        "type": "string"
      }
    ],
    "name": "aendereKooperation",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": true,
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "n",
        "type": "string"
      },
      {
        "name": "t",
        "type": "string"
      }
    ],
    "name": "ergaenzeVersicherung",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "n",
        "type": "string"
      }
    ],
    "name": "ergaenzeSpedition",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "vv",
        "type": "address"
      }
    ],
    "name": "ergaenzeVersicherungsvertrag",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  }


];



/*************************************************
 * 
 * 
 * 0Versicherungsvertrag managen
 * 
 * 
 ***************************************************/
function sucheKooperation(data)  {

  console.log("Kooperation suchen ..." + data.dieKooperation);

  //Anhang der Adresse den Kooperationsvertrag suchen
  var myContract = web3.eth.contract(kooperationABI);
  var contract = myContract.at(data.dieKooperationAdresse);
  data.dieKooperation = contract;

  contract.name((error, value) => {
    if (error) { console.error("fehlerchen: " + error); }
    if (!error) {
      data.dieKooperationName = value;
    }
  });

  contract.gibVersicherungsvertragAnzahl((error, value) => {
    if (error) {console.error(error);}
    data.anzahlVersicherungsvertraege=value;
  });
  console.log("Versicherungsvertrag (noch nicht?) gefunden!");

}






/*************************************************
 *
 *
 * 0Kooperationen managen
 *
 *
 ***************************************************/
function registriereVersicherungsvertrag(data){



  console.log("Registriere Vertrag ... " + data.dieKooperationName + data.derVersicherungsvertrag );
  var param1=data.derVersicherungsvertrag;

  try {

    //
    // Code für ändern ????
    //
   myContractInstance=data.dieKooperation;
   data.Systeminfo("REGistriere Versicherung (" + bcManager + gebuehr0 + fgGaslimit);
    myContractInstance.ergaenzeVersicherung(
      param1,
      {from : bcManager, value: gebuehr0, gas: fgGaslimit},
      function(err, result){
        if(!err) {
          // NOTE: The callback will fire twice!
          // Once the contract has the transactionHash property set and once its deployed on an address.
           // e.g. check tx hash on the first call (transaction send)
          if(!myContract.address) {
              console.log("Phase1- " + myContract.transactionHash) // The hash of the transaction, which deploys the contract

          // check address on the second call (contract deployed)
          } else {
              console.log("Phase2- " + myContract.address) // the contract address
          }
           // Note that the returned "myContractReturned" === "myContract",
          // so the returned "myContractReturned" object will also get the address set.
       }
       else {

         console.log("Fehler in der Methode beim Speditionen aendern: " + error);

       }
      });



    console.log("Registrierung des Versicherungsvertrags in der Kooperation fertig.")


  } catch (error) {

    console.log("Registrierung des Versicherungsvertrags in der Kooperation fehlerhaft " + error);

  }



}

 function aendereVersicherungsvertrag (data) {

  console.log("Kooperation aendern ... " + data.kpNameNeu );
  var param1=data.kpNameNeu;

  try {

    //
    // Code für ändern ????
    //
    var myContract = web3.eth.contract(versicherungsvertragABI);
    var myContractInstance = myContract.at(versicherungsvertragContractADR);
      console.log("contract/contractinstanz:" + myContract + "/" + myContractInstance);
      console.log("contract/contractinstanz:" + myContract.address + "/" + myContractInstance.address);

    myContractInstance.aendereName(
      param1,
      {from : bcManager, value: gebuehr1, gas: fgGaslimit},
      function(err, result){
        if(!err) {
          // NOTE: The callback will fire twice!
          // Once the contract has the transactionHash property set and once its deployed on an address.
           // e.g. check tx hash on the first call (transaction send)
          if(!myContract.address) {
              console.log("Phase1- " + myContract.transactionHash) // The hash of the transaction, which deploys the contract

          // check address on the second call (contract deployed)
          } else {
              console.log("Phase2- " + myContract.address) // the contract address
          }
           // Note that the returned "myContractReturned" === "myContract",
          // so the returned "myContractReturned" object will also get the address set.
       }
       else {

         console.log("Fehler in der Methode beim Container aendern: " + error);

       }
      });



    console.log("Kooperation aendern fertig.")


  } catch (error) {

    console.log("Fehler bei Kooperatoin  aendern: " + error);

  }

}


function aendereKooperationBeschreibung (data) {


  console.log("aendereBeschreibung  ... " + data.kpBeschreibungNeu );

  //parameter übernehmen
  var param1=data.kpBeschreibungNeu;


  try {

    //
    // Code für ändern
    //
    var myContract = web3.eth.contract(versicherungsvertragABI);
    var myContractInstance = myContract.at(versicherungsvertragContractADR);
      console.log("contract/contractinstanz:" + myContract + "/" + myContractInstance);
      console.log("contract/contractinstanz:" + myContract.address + "/" + myContractInstance.address);

    myContractInstance.aendereBeschreibung(
      param1,
      {from : bcManager, value: gebuehr0, gas: fgGaslimit},
      function(err, result){
        if(!err) {
          // NOTE: The callback will fire twice!
          // Once the contract has the transactionHash property set and once its deployed on an address.
           // e.g. check tx hash on the first call (transaction send)
          if(!myContract.address) {
              console.log("Phase1- " + myContract.transactionHash) // The hash of the transaction, which deploys the contract

          // check address on the second call (contract deployed)
          } else {
              console.log("Phase2- " + myContract.address) // the contract address
          }
           // Note that the returned "myContractReturned" === "myContract",
          // so the returned "myContractReturned" object will also get the address set.
       }
       else {

         console.log("Fehler in der Methode beim Container aendern: " + error);

       }
      });



    console.log("Kooperationsbeschreibung aendern fertig.")


  } catch (error) {

    console.log("Fehler bei Kooperationsbeschreibung  aendern: " + error);

  }

}

function aendereVersicherungsvertragTransport (data) {

  console.log("aendereKooperationSpedition ... " + data.sSpeditionname );
  var param1=data.sSpeditionname;

  try {

    //
    // Code für ändern ????
    //
    var myContract = web3.eth.contract(versicherungsvertragABI);
    var myContractInstance = myContract.at(versicherungsvertragContractADR);
      console.log("contract/contractinstanz:" + myContract + "/" + myContractInstance);
      console.log("contract/contractinstanz:" + myContract.address + "/" + myContractInstance.address);

    myContractInstance.ergaenzeSpedition(
      param1,
      {from : bcManager, value: gebuehr0, gas: fgGaslimit},
      function(err, result){
        if(!err) {
          // NOTE: The callback will fire twice!
          // Once the contract has the transactionHash property set and once its deployed on an address.
           // e.g. check tx hash on the first call (transaction send)
          if(!myContract.address) {
              console.log("Phase1- " + myContract.transactionHash) // The hash of the transaction, which deploys the contract

          // check address on the second call (contract deployed)
          } else {
              console.log("Phase2- " + myContract.address) // the contract address
          }
           // Note that the returned "myContractReturned" === "myContract",
          // so the returned "myContractReturned" object will also get the address set.
       }
       else {

         console.log("Fehler in der Methode beim Speditionen aendern: " + error);

       }
      });



    console.log("Kooperation mit Spedition aendern fertig.")


  } catch (error) {

    console.log("Fehler bei Kooperatoin mit Spedition aendern: " + error);

  }

}



function InitTransaktion (data) {

  data.trInfo1="Gaslimit: " + fgDefaultGaslimit;
  data.trInfo2="Gasprice: " + fgDefaultGasprice;
  data.trInfo3="Gas: " + fgDefaultGas;
  data.trInfo4="Manager: " + bcManager;

}


/*************************************************
 *
 *
 * 0Unternehmen managen
 *
 *
 ***************************************************/
function leseVersicherungsvertrag(data,art){

  console.log("Versicherungsvertrag lesen... " + art );
  var contract;

    //web3 = new Web3(web3.currentProvider);
    //var contractDesc = web3.eth.contract(kooperationABI);
    //var contract = contractDesc.at(kooperationContractADR); // "Cast"
    if (art==0)
      contract = data.derVersicherungsvertrag;
    else {
      var contractDesc = web3.eth.contract(versicherungsvertragABI);
      contract = contractDesc.at(data.VersicherungsvertragFindenID); // "Cast"
      data.derVersicherungsvertrag = contract;
    }
      

    t="0";
    data.versicherungsvertragsadresse = contract.address; //kooperationContractADR;
    //data.Systeminfo= kooperationABI + "/" + kooperationContractADR + "/" + contractDesc.adresse + "/"+ contract.adresse;
    console.log("step:" + t + "/" + data.va);

    data.versicherungsnehmer="vn";
    data.versicherer = "vu";
    try {


      t="0";
      contract.id((error, value) => {
        if (error) { console.error(error); }
        data.id = value;
      });
      console.log("step:" + t);

      t="0";
      contract.status((error, value) => {
        if (error) { console.error(error); }
        data.status = value;
      });
      console.log("step:" + t);

      t="1";
      contract.versicherungsnehmer((error, value) => {
        if (error) { console.error(error); }
        data.versicherungsnehmer = value;
      });
      console.log("step:" + t);

      t="2";
      contract.versicherer((error, value) => {
        if (error) { console.error(error); }
        data.versicherer = value;
      });
      console.log("step:" + t);

      t="3";
      contract.tarif((error, value) => {
        if (error) { console.error(error); }
        data.tarif = value;
      });
      console.log("step:" + t);

      t="4";
      contract.summe((error, value) => {
        if (error) { console.error(error); }
        data.summe = value.toString();
      });
      console.log("step:" + t);

      t="5";
      contract.laufzeit((error, value) => {
        if (error) { console.error(error); }
        data.laufzeit = value;
      });
      console.log("step:" + t);

      t="6";
      contract.beginn((error, value) => {
        if (error) { console.error(error); }
        data.beginn = value;
      });
      console.log("step:" + t);

      
      t="7";
      contract.ende((error, value) => {
        if (error) { console.error(error); }
        data.ende = value;
      });
      console.log("step" + t);

     
      t="8";
      data.anzahlTransporte=0;
      contract.gibTransportAnzahl((error, value) => {
        if (error) {console.error(error);}
        data.anzahlTransporte=value;
      });

      t="9";
      contract.gibSchadenDetails((error, value) => {
        if (error) { console.error(error); }
        data.schaden = value;
      });
      console.log("step" + t);

    } catch (error) {

      console.log("Fehler beim Versicherungsvertrag lesen:" + error);


    }


    //
    // Konto und -stand des Masters ermitteln
    //

    console.log("Versicherungsvertrag gelesen bis Schritt : " + t );

}



function anlegenVersicherungsvertrag (data) {

    console.log("bin beim versicherungsnehmer anlegen: ");
    console.log(data);
    var vv;

    //console.log(this.data.vvVersicherungssumme);

    //
    // Parameter aufbereiten
    //
    //constructor (string memory vn, string memory vu, string memory tar, int vnr, int sum ) public {
    var param0 = data.dieKooperationAdresse;
    var param1 = data.versicherungsnehmer;
    var param2 = data.versicherer;
    var param3 = data.tarif;
    var param4 = 1; //data.versicherungsid.toNumber();
    var param5 = 100000 ; //data.summe
    

 
    data.Systeminfo="Versicherungsvertrag anlegen (" + bcManager + "gasprice:" + fgDefaultGasprice + "gas" + fgDefaultGas;
    const contractDesc = web3.eth.contract(versicherungsvertragABI);
    vv = contractDesc.new(param0,param1,param2,param3,param4,param5, {
      data: versicherungsvertragByteCodeADR,
      from: bcManager,
      gas : fgDefaultGas
    }, function(error, value) {
        if (error)  { console.error("Fehler bei der Anlage: " + error); }
        console.log("Versicherungsvertrag angelegt?"); // + contract.address);
        //data.derVersicherungsvertrag = contract;

    });
    console.log("Versicherungsvertrag anlegen abgeschlossen." + vv);
    /*
    const contractDesc = new web3.eth.contract(versicherungsvertragABI);
    data.Systeminfo="Versicherungsvertrag anlegen (" + bcManager + "gasprice:" + fgDefaultGasprice + "gas" + fgDefaultGas;
    contractDesc.deploy({data: versicherungsvertragByteCodeADR,arguments: [param0,param1,param2,param3,param4,param5]})
        .send({
        from: bcManager,
        gas: 1500000,
        gasPrice: '30000000000000'
    }, (error, transactionHash) => { console.log("fehler:" + error + transactionHash) })
    .on('error', (error) => { console.log(error) })
    .on('transactionHash', (transactionHash) => { console.log(error) })
    .on('receipt', (receipt) => {
       console.log(receipt.contractAddress) // contains the new contract address
    })
    .on('confirmation', (confirmationNumber, receipt) => { console.log("fertig") })
    .then((newContractInstance) => {
        console.log(newContractInstance.options.address) // instance with the new contract address
    });*/


  }




function sucheVersicherungsvertrag(data)  {

  console.log("Versicherungsvertrag suchen ..." + data.derVersicherungsvertrag);

  //Anhang der Adresse den Kooperationsvertrag suchen
  var myContract = web3.eth.contract(versicherungsvertragABI);
  var contract = myContract.at(data.derVersicherungsvertragAdresse);
  data.derVersicherungsvertrag = contract;

  contract.name((error, value) => {
    if (error) { console.error("fehlerchen: " + error); }
    if (!error) {
      data.derVersicherungsvertragName = value;
    }
  });

  contract.gibTransportAnzahl((error, value) => {
    if (error) {console.error(error);}
    data.anzahlTransporte=value;
  });
  console.log("Versicherungsvertrag (noch nicht?) gefunden!");

}




/*************************************************
 *
 *
 * 5Testdaten managen
 *
 *
 ***************************************************/
function ErzeugeTestdaten (data) {

  //
  //Gründungsverträge erstellen
  //
  data.versicherungsnehmer="flink&schnell";
  data.versicherer="ruv";
  data.tarif="standardTarif-2014";
  data.versicherungsid="12";
  data.summe="120";
  anlegenVersicherungsvertrag(data);

  leseVersicherungsvertrag(data);

  console.log("Gründungsverträge erfolgreich initialisiert");

}



function sucheVersicherungsvertraege(data) {

  console.log("Versicherungsverträge finden..." + data.dieKooperationName);

  var versicherungsid;
  var versicherungsname;
  var anzahl=0;

  try {

    //parameter übernehmen
    data.versicherungsvertraege=new Array();
    anzahl=data.anzahlVersicherungsvertraege;
    for (let i = 0; i < anzahl; i++) {
         console.log(i + ".Versicherungsvertrag von " + anzahl);

      //vertrag holen
      data.dieKooperation.gibVersicherungsvertrag (i,(error,value) => {
        if (error) {console.error("Fehler beim " + i + "Versicherungsvertrag:" + error);}
        if (!error) {
  
          console.log("Vertragadresse:" + value);
          var contractDesc = web3.eth.contract(versicherungsvertragABI);
          var contract = contractDesc.at(value); // "Cast"

          //Daten holen
          contract.gibDetails((error, value) => {
            if (error) {console.error("Fehler beim " + i + "Versicherungsvertrag:" + error);}
            if (!error) {
    
              if (i==1) data.VersicherungsvertragFindenID=contract.address;

              //liste aktualisieren
              data.versicherungsvertraege.push (
                  {id : value[0],
                  versicherer : value[1],
                  versicherungsnehmer : value[2],
                  tarif : value[3],
                  summe : value[4],
                  status : value[6],
                  adresse: contract.address}
              );
            };
          });
        }
      });
    }

  }
  catch (error)
  {
    console.log("Fehler beim Lesen der Unternehmen : " + error);
  }

}





function InitTestparameter(data) {


  console.log("Parameter erzeugen");


   //
  //Testparameter erstellen
  //
  max=1000000;
  i = Math.round(Math.random() * (max - 1)) + 1;

  data.versicherungsnehmer="newDigitalTransport";
  data.versicherer="digAssurance Cooperate";
  data.tarif="FlatTransport2019";
  data.versicherungsid=i.toString();
  data.summe="12000000";
  data.status="geplant";
  data.laufzeit="24 Monate";
  data.beginn="1.1.2019";
  data.schaden=0;


  console.log("Parameter erzeugt" + data);
}



function eingabenPruefen (data) {

  var adressat;

  //
  // Wieviel ?
  //
  try {

    betragInEth = data.amount;
    betragInWei = web3.toWei(data.amount, 'ether');
    console.log("Konvertieren erfolgreich : von " +  data.amount +" nach "+  betragInWei);

  } catch (error) {
      console.log("Fehler beim Konvertieren:" +  data.amount +"/"+  + error);
    return 2;
  }

  //
  // alles gut
  //
  return 0;

}


function NaechsteSeite (data) {
  var link ="tp.html?";
  link=link+"kpAdresse="+data.dieKooperationAdresse;
  link=link+"&kpName="+data.dieKooperationName;
  link=link+"&vvAdresse="+data.versicherungsvertragsadresse;
  link=link+"&vvName="+data.id;
  link=link+"&bcm="+data.derManager;

  //link=link+"','Beispiel'";
  console.log(link);
  data.link=link;
  window.open(link);

}

/*************************************************
 *
 *
 * 9Startseite aufrufen
 *
 *
 ***************************************************/
function initVue() {

  const data = {

    /* Listen */
    versicherungsvertraege : [],
    anzahlVersicherungsvertraege : 0,


    transporte : [],
    anzahlTransporte : 0,



    /* Suchparameter */
    VersicherungsvertragFindenID : "unternehmen-id",

    VersichererFindenID : "versicherer-id",

    VersicherungsnehmerFindenID : "versicherten-id",

    trInfo1 :"",
    trInfo2 :"",
    trInfo3 :"",
    trInfo4 : "",

    /* Objekte */
     id : "id",
     versicherungsvertragsadresse : "adresse",
     versicherer : "versicherer",
     versicherungsnehmer : "versicherungsnehmer",
     beginn : "beginn",
     ende : "ende",
     tarif : "tarif",
     status : "status",
     summe :  "summe",
     laufzeit : "laufzeit",
     schaden : "schaden",
     saldo : "saldo",
     waehrung : "waehrung",
     adresse : "adresse",

    /** aktuelle Objekte */
    derVersicherungsvertrag : "derVersicherungsvertrag",
    dieKooperation : "noch zu suchen",
    dieKooperationAdresse : "0x2f7b5140F7992EBd8Ff7d337119c5fDe767Cc004",
    dieKooperationName : "newDigitalCareerMarket",
    derManager : "...",


    /* sonstiges */
    zufallszahl : 1,
    Systeminfo : "keine Meldungen vorhanden",
    selected : "",


  };
  new Vue({
    el: '#app',
    components: { App },
    template: '<App/>',
    data: data,
    methods: {

      getClass: ({ id }) => ({
        'md-primary': id === 2,
        'md-accent': id === 3
      }),
      onSelect (item) {
        this.selected = item
      },

      VersicherungsvertragAendern() {

        if (data.kpNameNeu!="") {
          aendereVersicherungsvertrag(data);
        }

        /*if (data.kpBeschreibungNeu!="") {
          aendereKooperationBeschreibung(data);
        }*/
      },


      VersicherungsvertragFiltern() {
        //todo

      },

      VersicherungsvertragSuchen() {
        sucheVersicherungsvertraege(data);
      },

      VersicherungsvertragAnlegen() {
        anlegenVersicherungsvertrag(data);
        //data.Systeminfo="noch nicht implementiert";

      },

      VersicherungsvertragAnzeigen() {
        leseVersicherungsvertrag (data,1) ;

      },

      VersicherungsvertragRegistrieren() {
        registriereVersicherungsvertrag (data);
      },



      NaechsteSeite() {
        NaechsteSeite(data);
      },

      TestparameterErzeugen() {
        InitTestparameter(data);
      },

      TestdatenErzeugen() {
        ErzeugeTestdaten(data);
      },



    }
  });

  InitTransaktion(data);

  //Werte übernommen
  data.anzahlTransporte = 0;
  data.derManager=bcManager;
  data.dieKooperationAdresse=kooperationContractADR;

  //Kooperation initialisieren
  sucheKooperation(data);


  console.log("Initialisierung abgeschlossen");


}